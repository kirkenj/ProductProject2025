@using Clients.CustomGateway
@using Front.Services
@inject CustomAuthStateProvider authStateProvider
@inject IGatewayClient gatewayClient
@inject NavigationManager navManager


<table class="table">
    <thead>
        <tr>
            <th>Login</th>
            <th>Email</th>
            @if (IsAdminView)
            {
                <th>Address</th>
            }
            <th>Name</th>
            @if (IsAdminView)
            {
                <th>Role</th>
            }
            <th></th>
        </tr>
    </thead>

    <thead>
        <tr>
            <th><input class="input-group-text" @bind-value=LoginFilter /></th>
            <th><input class="input-group-text" @bind-value=EmailFilter /></th>
            @if (IsAdminView)
            {
                <th>
                    <input class="input-group-text" @bind-value=AddressFilter />
                </th>
            }
            <th><input class="input-group-text" @bind-value=NameFilter /></th>
            @if (IsAdminView)
            {
                <th>
                    <select @bind=RoleFilter>
                        <option value="@DEFAULT_ROLE_FILTER_VALUE">Any</option>
                        <option value="1">Admin</option>
                        <option value="2">Regular</option>
                    </select>
                </th>
            }
            <th style='white-space: nowrap'>
                <button class="btn btn-primary" @onclick="async (e) => await OnFilterClicked()">Filter</button>
                <button class="btn btn-danger" @onclick="OnClearFilterClicked">Clear</button>
            </th>
        </tr>
    </thead>

    <tbody>
        @if (Users != null)
        {
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.Login</td>
                    <td>@user.Email</td>
                    @if (IsAdminView)
                    {
                        <td>@user.Address</td>
                    }
                    <td>@user.Name</td>
                    @if (IsAdminView)
                    {
                        <td>@user.Role.Name</td>
                    }
                    <td><NavLink class="btn btn-primary" @onclick="async (e) => {if (OnUserClickedAsync != null) await OnUserClickedAsync(user);}">@ButtonText</NavLink>  </td>
                </tr>
            }  
        }
    </tbody>
    <tfoot>
        <tr>
            @if (ShowLoadMoreButton)
            {
                <td align="center" colspan=@(IsAdminView ? "6" : "4")><button class="btn btn btn-secondary" @onclick="async (e) => await OnFilterClicked(true)">Load more</button></td>
            }
        </tr>
    </tfoot>
</table>


@code {
    private List<UserDto> Users { get; set; } = null!;

    private const int DEFAULT_ROLE_FILTER_VALUE = -1;

    private string? LoginFilter;
    private string? EmailFilter;
    private string? NameFilter;
    private string? AddressFilter;
    private string? RoleFilter;

    private string? currentFilter;

    private int LoadAmm;
    private int _loadCounter = 0;
    private bool ShowLoadMoreButton = false;

    private const int DEFAULT_LOAD_VALUE = 10;

    private Front.Models.User? authenticatedUser;
    private bool IsAdminView => authenticatedUser?.IsAdmin ?? false;

    protected override async Task OnInitializedAsync()
    {
        LoadAmm = DEFAULT_LOAD_VALUE;
        authenticatedUser = authStateProvider.CurrentUser;
        if (OnUserButtonClickedAsyncHandler != null)
        {
            OnUserClickedAsync += OnUserButtonClickedAsyncHandler;
        }

        await OnFilterClicked(new());
    }


    private async Task OnFilterClicked(bool incrimentPageCounter = false)
    {
        IEnumerable<int> roleFilter = Enumerable.Empty<int>();
        if (IsAdminView)
        {
            if (!string.IsNullOrEmpty(RoleFilter))
            {
                if (!int.TryParse(RoleFilter, out int role))
                {
                    Console.WriteLine("Couldn't parse role filter");
                    return;
                }

                if (role != DEFAULT_ROLE_FILTER_VALUE)
                {
                    roleFilter = [role];
                }
            }
        }
        else
        {
            AddressFilter = null;
        }

        var filter = $"Login:{LoginFilter}; Email:{EmailFilter}; Name:{NameFilter}; Address:{AddressFilter}; Role:{RoleFilter}";
        Console.WriteLine(filter);
        List<UserDto> res;
        if (filter == currentFilter && incrimentPageCounter)
        {
            res = (await gatewayClient.ListAsync(null, null, LoginFilter, null, EmailFilter, AddressFilter, NameFilter, roleFilter, ++_loadCounter, LoadAmm)).ToList();
            Users.AddRange(res);
        }
        else
        {
            _loadCounter = 1;
            currentFilter = filter;
            res = (await gatewayClient.ListAsync(null, null, LoginFilter, null, EmailFilter, AddressFilter, NameFilter, roleFilter, _loadCounter, LoadAmm)).ToList();
            Users = res;
        }

        ShowLoadMoreButton = res.Count() == LoadAmm;
    }

    private void AuthStateChanged(Task<AuthenticationState> authenticationState)
    {
        authenticatedUser = authStateProvider.CurrentUser;
        StateHasChanged();
    }

    private async Task OnClearFilterClicked(MouseEventArgs e)
    {
        LoginFilter = null;
        EmailFilter = null;
        NameFilter = null;
        AddressFilter = null;
        RoleFilter = DEFAULT_ROLE_FILTER_VALUE.ToString();
        currentFilter = null;
        await OnFilterClicked();
    }

    public event Func<UserDto, Task>? OnUserClickedAsync;

    [Parameter]
    public Func<UserDto, Task>? OnUserButtonClickedAsyncHandler { get; set; }
    [Parameter]
    public string? ButtonText { get; set; }
}

