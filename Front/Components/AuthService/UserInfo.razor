@using Front.Extensions
@using Front.Models
@using Front.Components.Modals;
@using Clients.CustomGateway
@inherits Front.Components.Common.CustomComponentBase
@inject Clients.CustomGateway.IGatewayClient gatewayClient
@inject Front.Services.CustomAuthStateProvider authStateProvider
@inject NavigationManager navManager


@if (userDto != null)
{
    <Front.Components.Modals.InputBox @ref=inputBox />
    <Front.Components.Modals.MessageBox @ref=messageBox />
    <table>
        <tr>
            <td>Id</td>
            <td align="right">@userDto.Id</td>
        </tr>
        @if (!string.IsNullOrEmpty(EmailChangeInputMessage))
        {
            <tr>
                <td colspan="3" style="color:red">
                    <div>@EmailChangeInputMessage</div>
                </td>
            </tr>
        }
        <tr>
            <td>Email</td>
            <td align="right"><Front.Components.Common.TextBox @ref=EmailInputTextBox Type="text" Class="input-group-text text-lg-end" /> </td>
            @if (IsAdminOrOwner)
            {

                @if (EmailEditButtonVisible)
                {
                    <td align="left" class="btn btn-primary" @onclick="OnEditEmailClicked">Edit</td>
                }
                @if (EmailEditConfirmButtonVisible)
                {
                    <td align="left" class="btn btn-primary" @onclick="OnEditEmailConfirmClicked">Ok</td>
                    <td align="left" class="btn btn-danger" @onclick="OnEditEmailCancelClicked">Cancel</td>
                    <td align="left" class="nav-link" @onclick="OnIHaveTokenClicked">I have token</td>
                }
            }
        </tr>
        @if (!string.IsNullOrEmpty(LoginChangeInputMessage))
        {
            <tr>
                <td colspan="3" style="color:red">
                    <div>@LoginChangeInputMessage</div>
                </td>
            </tr>
        }
        <tr>
            <td>Login</td>
            <td align="right"><Front.Components.Common.TextBox @ref=LoginInputTextBox Type="text" Class="input-group-text text-lg-end" /> </td>
            @if (IsAdminOrOwner)
            {

                @if (LoginEditButtonVisible)
                {
                    <td align="left" class="btn btn-primary" @onclick="OnEditLoginClicked">Edit</td>
                }
                @if (LoginEditConfirmButtonVisible)
                {
                    <td align="left" class="btn btn-primary" @onclick="OnEditLoginConfirmClicked">Ok</td>
                    <td align="left" class="btn btn-danger" @onclick="OnEditLoginCancelClicked">Cancel</td>
                }
            }
        </tr>
        @if (IsAdmin)
        {
            <tr>
                <td>Role</td>
                <td align="right"><Front.Components.Common.ListBox @ref=RoleListBox keyValuePairs="@Roles.Select(r => new KeyValuePair<int, string>(r.Id, r.Name))" ParseDelegate="int.Parse" Class="text-lg-end"/></td>


                @if (EditRoleButtonVisible)
                {
                    <td class="btn btn-primary" @onclick="OnEditRoleClicked">Edit</td>
                }
                @if (EditRoleConfirmButtonVisible)
                {
                    <td align="left" class="btn btn-primary" @onclick="OnEditRoleConfirmClicked">Ok</td>
                    <td align="left" class="btn btn-danger" @onclick="OnEditRoleCancelClicked">Cancel</td>
                }
            </tr>
        }
        else
        {
            RoleListBox = null;
        }
        @if (!string.IsNullOrEmpty(NameChangeInputMessage))
        {
            <tr>
                <td colspan="3" style="color:red">
                    <div>@NameChangeInputMessage</div>
                </td>
            </tr>
        }

        <tr>
            <td>Name</td>
            <td align="right"><Front.Components.Common.TextBox @ref=NameInputTextBox Type="text" Class="input-group-text text-lg-end"/> </td>

            @if (IsAdminOrOwner)
            {
                @if(EditInfoButtonVisible)
                {
                    <td class="btn btn-primary" @onclick="OnEditNameAndAdressClicked">Edit</td>
                }
                @if (EditInfoConfirmButtonVisible)
                {
                    <td align="left" class="btn btn-primary" @onclick="OnEditNameAndAdressConfirmClicked">Ok</td>
                    <td align="left" class="btn btn-danger" @onclick="OnEditNameAndAdressCancelClicked">Cancel</td>
                }
            }
        </tr>
        @if (!string.IsNullOrEmpty(AddressChangeInputMessage))
        {
            <tr>
                <td colspan="3" style="color:red">
                    <div>@AddressChangeInputMessage</div>
                </td>
            </tr>
        }
        <tr>
            <td> Address</td>
            <td align="right"><Front.Components.Common.TextBox @ref=AddressInputTextBox Type="text" Class="input-group-text text-lg-end"/> </td>
        </tr>
        @if (IsAdminOrOwner)
        {
            <tr>
                <td></td>
                <td></td>
                <td><button class="btn btn-danger" @onclick="OnTerminateSessionsClicked">Terminate sessions</button></td>
            </tr>
        }
    </table>

    @if (userDto.Id == (User?.Id ?? Guid.Empty))
    {
        @if (UpdatePasswordFormVisible)
        {
            @if (!string.IsNullOrEmpty(PasswordMessage))
            {
                <div class="text-danger">
                    @PasswordMessage
                </div>
            }
            <table>
                <tr>
                    <td>New password</td>
                    <td>
                        <input type="password" class="input-group-text" style="width:auto" @bind-value="NewPassword" />
                    </td>
                </tr>
                <tr>
                    <td>Confirm password</td>
                    <td>
                        <input type="password" class="input-group-text" style="width:auto" @bind-value="ConfirmPassword" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <button class="btn btn-secondary" @onclick="PasswordCancelClicked">Cancel</button>
                    </td>
                    <td align="right">
                        <button class="btn btn-primary" @onclick="PasswordSubmitClicked">Submit</button>
                    </td>
                </tr>
            </table>
        }
        else
        {
            <button class="btn btn-primary" @onclick="PasswordUpdateClicked">Update password</button>
        }
    }

}
else if (thrownException != null)
{
    <div>@thrownException.Message</div>
    <div>@thrownException.HResult</div>
    <div>@thrownException.Response</div>
}
else
{
    <div>Nothing here...</div>
}


@code {
    [Parameter]
    public Guid Id { get; set; }

    private User? User { get; set; }

    private bool IsAdminOrOwner => User != null && (User.Id == Id || IsAdmin);
    private bool IsAdmin => User != null && User.IsAdmin;

    private UserDto? userDto;
    private Clients.CustomGateway.GatewayException? thrownException;

    private bool EmailEditButtonVisible = true;
    private bool EmailEditConfirmButtonVisible = false;

    private bool LoginEditButtonVisible = true;
    private bool LoginEditConfirmButtonVisible = false;

    private bool EditRoleButtonVisible = true;
    private bool EditRoleConfirmButtonVisible = false;

    private bool EditInfoButtonVisible = true;
    private bool EditInfoConfirmButtonVisible = false;

    private bool UpdatePasswordFormVisible = false;

    private Front.Components.Common.TextBox EmailInputTextBox = new();
    private Front.Components.Common.TextBox LoginInputTextBox = new();
    private Front.Components.Common.TextBox NameInputTextBox = new();
    private Front.Components.Common.TextBox AddressInputTextBox = new();
    private Front.Components.Common.ListBox<int>? RoleListBox = new();
    private Front.Components.Modals.InputBox inputBox = null!;
    private Front.Components.Modals.MessageBox messageBox = null!;

    private string? EmailChangeInputMessage;

    private string? LoginChangeInputMessage;

    private string? AddressChangeInputMessage;

    private string? NameChangeInputMessage;

    private string? PasswordMessage;
    private string? NewPassword;
    private string? ConfirmPassword;

    private static IEnumerable<RoleDto> Roles = null!;

    protected override void OnSecondRender()
    {
        EmailInputTextBox.Value = userDto?.Email ?? string.Empty;
        EmailInputTextBox.Disabled = true;

        LoginInputTextBox.Value = userDto?.Login ?? string.Empty;
        LoginInputTextBox.Disabled = true;

        NameInputTextBox.Value = userDto?.Name ?? string.Empty;
        NameInputTextBox.Disabled = true;

        AddressInputTextBox.Value = userDto?.Address ?? string.Empty;
        AddressInputTextBox.Disabled = true;

        if (RoleListBox != null)
        {
            RoleListBox.Value = userDto?.Role.Id ?? 1;
            RoleListBox.Disabled = true;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            thrownException = null;
            Roles = await gatewayClient.RolesAllAsync();
            userDto = await gatewayClient.UsersGETAsync(Id);

            User = authStateProvider.CurrentUser;
            authStateProvider.AuthenticationStateChanged += AuthStateChanged;
        }
        catch (Clients.CustomGateway.GatewayException ex)
        {
            if (ex.IsValidationException(out IEnumerable<FluentValidation.Results.ValidationFailure>? failures) && failures != null)
            {
                HandleValidationFailure(failures);
                return;
            }

            messageBox.ModalShow("Error", ex.Response);
        }

        StateHasChanged();
    }

    private void AuthStateChanged(Task<AuthenticationState> authenticationState)
    {
        User = authStateProvider.CurrentUser;
        StateHasChanged();
    }

    #region Email

    private void OnEditEmailCancelClicked(MouseEventArgs e)
    {
        EmailEditConfirmButtonVisible = false;
        EmailEditButtonVisible = true;
        EmailInputTextBox.Value = userDto?.Email ?? string.Empty;
        EmailInputTextBox.Disabled = true;
        EmailChangeInputMessage = null;
        StateHasChanged();
    }

    private void OnEditEmailClicked(MouseEventArgs e)
    {
        EmailEditConfirmButtonVisible = true;
        EmailEditButtonVisible = false;
        EmailInputTextBox.Disabled = false;
        StateHasChanged();
    }

    private async Task OnEditEmailConfirmClicked(MouseEventArgs e)
    {
        if (userDto == null)
        {
            EmailChangeInputMessage = "User is not authenticated";
            return;
        }

        if (userDto.Email != EmailInputTextBox.Value)
        {
            if (!System.Net.Mail.MailAddress.TryCreate(EmailInputTextBox.Value, out System.Net.Mail.MailAddress? a))
            {
                EmailChangeInputMessage = "That is not a valid email";
                return;
            }

            EmailChangeInputMessage = null;

            try
            {
                var message = await gatewayClient.Email2Async(userDto.Id, EmailInputTextBox.Value);
                ShowEmailChangeConfirmInputBox(message);
            }
            catch (Clients.CustomGateway.GatewayException ex)
            {
                if (ex.IsValidationException(out IEnumerable<FluentValidation.Results.ValidationFailure>? failures) && failures != null)
                {
                    HandleValidationFailure(failures);
                    return;
                }

                messageBox.ModalShow("Error", ex.Response);
            }
        }
        else
        {
            OnEditEmailCancelClicked(e);
        }
    }

    private void ShowEmailChangeConfirmInputBox(string? message = null)
    {
        inputBox.ModalShow($"Input token sent on email", message);
        inputBox.OnClose += OnEmailChangeInputBoxClosed;
    }

    private void OnIHaveTokenClicked(MouseEventArgs e)
    {
        ShowEmailChangeConfirmInputBox();
    }

    private async void OnEmailChangeInputBoxClosed(bool cancelled, string? resultString)
    {
        resultString = resultString?.Trim() ?? string.Empty;

        if (userDto == null)
        {
            Console.WriteLine("User is null");
            return;
        }

        if (cancelled) return;

        if (string.IsNullOrEmpty(resultString))
        {
            inputBox.ModalShow($"Input token sent on email '{EmailInputTextBox.Value}'");
            return;
        }

        try
        {
            await gatewayClient.Confirm2Async(userDto.Id, resultString);

            if ((User?.Id ?? Guid.Empty) == userDto.Id)
            {
                messageBox.OnClose += (c) => { messageBox.ClearOnCloseEvent(); authStateProvider.Logout(); navManager.NavigateTo(""); return Task.CompletedTask; };
                messageBox.ModalShow("Success","Now you have to login with new parameters");
            }
            else
            {
                messageBox.OnClose += (c) => { messageBox.ClearOnCloseEvent(); var url = navManager.Uri; navManager.NavigateTo(""); navManager.NavigateTo(url); return Task.CompletedTask; };
                messageBox.ModalShow("Info", "All current sessions of this user are closed");
            }

            inputBox.OnClose -= OnEmailChangeInputBoxClosed;
        }
        catch (Clients.CustomGateway.GatewayException ex)
        {
            if (ex.IsValidationException(out IEnumerable<FluentValidation.Results.ValidationFailure>? failures) && failures != null)
            {
                HandleValidationFailure(failures);
                return;
            }

            messageBox.ModalShow("Error", ex.Response);
        }
    }

    #endregion

    #region Login

    private void OnEditLoginCancelClicked(MouseEventArgs e)
    {
        LoginEditConfirmButtonVisible = false;
        LoginEditButtonVisible = true;
        LoginInputTextBox.Value = userDto?.Login ?? string.Empty;
        LoginInputTextBox.Disabled = true;
        LoginChangeInputMessage = null;
        StateHasChanged();
    }

    private void OnEditLoginClicked(MouseEventArgs e)
    {
        LoginEditConfirmButtonVisible = true;
        LoginEditButtonVisible = false;
        LoginInputTextBox.Disabled = false;
        StateHasChanged();
    }

    private async Task OnEditLoginConfirmClicked(MouseEventArgs e)
    {
        if (User == null)
        {
            LoginChangeInputMessage = "User is not authenticated";
            return;
        }

        if (userDto == null)
        {
            LoginChangeInputMessage = "Editing User is not defined";
            return;
        }

        if (userDto.Login != LoginInputTextBox.Value)
        {
            LoginChangeInputMessage = null;

            try
            {
                var message = await gatewayClient.LoginPUT2Async(userDto.Id, LoginInputTextBox.Value);

                if (User.Id == userDto.Id)
                {
                    messageBox.OnClose += (c) => { messageBox.ClearOnCloseEvent(); authStateProvider.Logout(); navManager.NavigateTo(""); return Task.CompletedTask; };
                    messageBox.ModalShow("Success", "Relogin needed");
                }
                else
                {
                    messageBox.OnClose += (c) => { messageBox.ClearOnCloseEvent(); var url = navManager.Uri; navManager.NavigateTo(""); navManager.NavigateTo(url); return Task.CompletedTask; };
                    messageBox.ModalShow("Success", message);
                }
            }
            catch (Clients.CustomGateway.GatewayException ex)
            {
                if (ex.IsValidationException(out IEnumerable<FluentValidation.Results.ValidationFailure>? failures) && failures != null)
                {
                    HandleValidationFailure(failures);
                    return;
                }

                messageBox.ModalShow("Error", ex.Response);                
            }
        }
        else
        {
            OnEditLoginCancelClicked(e);
        }
    }

    #endregion

    #region Role
    private void OnEditRoleClicked(MouseEventArgs e)
    {
        if (RoleListBox == null)
        {
            return;    
        }

        EditRoleButtonVisible = false;
        RoleListBox.Disabled = false;
        EditRoleConfirmButtonVisible = true;
    }

    private async Task OnEditRoleConfirmClicked(MouseEventArgs e)
    {
        if (RoleListBox == null)
        {
            return;
        }

        if (RoleListBox.Value == (userDto?.Role.Id ?? RoleListBox.Value))
        {
            OnEditRoleCancelClicked(e);
            return;
        }

        if (userDto == null)
        {
            messageBox.ModalShow("Error", "Editing object is not set");
            return;
        }

        if (User == null)
        {
            messageBox.ModalShow("No access", "User is not authorized");
            OnEditRoleCancelClicked(new());
            return;
        }

        try
        {
            var msg = await gatewayClient.RoleAsync(userDto.Id, RoleListBox.Value);

            if (User.Id == userDto.Id)
            {
                messageBox.OnClose += (c) => { messageBox.ClearOnCloseEvent(); authStateProvider.Logout(); navManager.NavigateTo(""); return Task.CompletedTask; };
                messageBox.ModalShow("Success", "Relogin needed");
            }
            else
            {
                messageBox.OnClose += (c) => { messageBox.ClearOnCloseEvent(); var url = navManager.Uri; navManager.NavigateTo(""); navManager.NavigateTo(url); return Task.CompletedTask; };
                messageBox.ModalShow("Success", msg);
            }
        }
        catch (GatewayException ex)
        {
            if (ex.IsValidationException(out IEnumerable<FluentValidation.Results.ValidationFailure>? failures) && failures != null)
            {
                HandleValidationFailure(failures);
                return;
            }

            messageBox.ModalShow("Error", ex.Response);            
        }
    }

    private void OnEditRoleCancelClicked(MouseEventArgs e)
    {
        if (RoleListBox == null)
        {
            return;
        }

        RoleListBox.Disabled = true;
        EditRoleButtonVisible = true;
        EditRoleConfirmButtonVisible = false;
    }
    #endregion

    #region Info
    private void OnEditNameAndAdressClicked(MouseEventArgs e)
    {
        NameInputTextBox.Disabled = false;
        AddressInputTextBox.Disabled = false;
        EditInfoButtonVisible = false;
        EditInfoConfirmButtonVisible = true;

    }

    private void OnEditNameAndAdressCancelClicked(MouseEventArgs e)
    {

        NameInputTextBox.Disabled = true;
        AddressInputTextBox.Disabled = true;
        EditInfoButtonVisible = true;
        EditInfoConfirmButtonVisible = false;
    }

    private async void OnEditNameAndAdressConfirmClicked(MouseEventArgs e)
    {
        if (userDto == null || (userDto.Address == AddressInputTextBox.Value && userDto.Name == NameInputTextBox.Value))
        {
            OnEditNameAndAdressCancelClicked(new());
            return;
        }

        try
        {
            var msg = await gatewayClient.UsersPUTAsync(userDto.Id, new() {Address = AddressInputTextBox.Value, Name = NameInputTextBox.Value });
            var uri = navManager.Uri;
            navManager.NavigateTo("");
            navManager.NavigateTo(uri);
        }
        catch (GatewayException ex)
        {
            if (ex.IsValidationException(out IEnumerable<FluentValidation.Results.ValidationFailure>? failures) && failures != null)
            {
                HandleValidationFailure(failures);
                return;
            }

            messageBox.ModalShow("Error", ex.Response);
        }
    }
    #endregion

    private async Task OnTerminateSessionsClicked(MouseEventArgs e)
    {
        if (!IsAdminOrOwner || userDto == null)
        {
            return;
        }

        try
        {
            await gatewayClient.TerminateSessionsAsync(userDto.Id);
            if (userDto.Id == User?.Id)
            {
                messageBox.ModalShow("Attention", "Relogin needed"); 
                messageBox.OnClose += (c) => { messageBox.ClearOnCloseEvent(); authStateProvider.Logout(); navManager.NavigateTo(""); return Task.CompletedTask; };
            }
            else
            {
                messageBox.ModalShow("All user's current sessions have been terminated");
            }
        }
        catch (GatewayException ex)
        {
            if (ex.IsValidationException(out IEnumerable<FluentValidation.Results.ValidationFailure>? failures) && failures != null)
            {
                HandleValidationFailure(failures);
                return;
            }

            messageBox.ModalShow("Error", ex.Response);
        }
    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
        base.OnParametersSet();
    }

    #region Password
    private void PasswordUpdateClicked(MouseEventArgs e)
    {
        PasswordMessage = null;
        UpdatePasswordFormVisible = true;    
    }
    private async Task PasswordSubmitClicked(MouseEventArgs e)
    {
        if (string.IsNullOrEmpty(NewPassword))
        {
            PasswordMessage = "Password can not be empty";
            return;
        }

        if (NewPassword != ConfirmPassword)
        {
            PasswordMessage = "Confirm password has to be equal to new password";
            return;
        }

        try
        {
            var result = await gatewayClient.PasswordAsync(NewPassword);
            NewPassword = null;
            PasswordCancelClicked(e);
            messageBox.ClearOnCloseEvent();
            messageBox.ModalShow("Success", "Password updated");
        }
        catch (GatewayException ex)
        {
            if (ex.IsValidationException(out IEnumerable<FluentValidation.Results.ValidationFailure>? failures) && failures != null)
            {
                HandleValidationFailure(failures);
                return;
            }

            messageBox.ModalShow("Error", ex.Response);
        }
    }
    private void PasswordCancelClicked(MouseEventArgs e)
    {
        UpdatePasswordFormVisible = false;
        NewPassword = null;
    }
    #endregion


    void HandleValidationFailure(IEnumerable<FluentValidation.Results.ValidationFailure> failures)
    {
        if (failures == null || !failures.Any())
        {
            return;
        }

        foreach (var f in failures)
        {
            switch (f.PropertyName.Split('.', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)[1])
            {
                case "Id":
                    messageBox.ModalShow("Error", f.ErrorMessage);
                    break;
                case "Email":
                    EmailChangeInputMessage = f.ErrorMessage;
                    break;
                case "Address":
                    AddressChangeInputMessage = f.ErrorMessage;
                    break;
                case "Name":
                    NameChangeInputMessage = f.ErrorMessage;
                    break;
                case "NewLogin":
                    messageBox.ModalShow("Error", f.ErrorMessage);
                    break;
                case "RoleID":
                    messageBox.ModalShow("Error", f.ErrorMessage);
                    break;
            }
        }

        StateHasChanged();
    }
}

<style>
    select {
        border: 0;
        width: 100%;
        height:100%;
    }

    input{
        width: 100%;
    }

    input:disabled {
        border:0;
        background-color: rgba(255, 255, 255, .0);
    }    
</style>
