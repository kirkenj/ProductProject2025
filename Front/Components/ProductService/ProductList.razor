@using Clients.CustomGateway
@using Front.Services
@inject CustomAuthStateProvider authStateProvider
@inject IGatewayClient gatewayClient
@inject NavigationManager navManager


<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Price</th>
            <th>Available</th>
            <th></th>
        </tr>
    </thead>

    <thead>
        <tr>
            <th><input class="input-group-text" @bind-value=NameFilter /></th>
            <th width="30%">
                <div style="display:flex">
                    <input type="number" class="input-group-text" @bind-value=PriceFilterFrom placeholder="From" style="width:50%" />
                    <input type="number" class="input-group-text" @bind-value=PriceFilterTo placeholder="To" style="width:50%" />
                </div>
            </th>
            <td><input type="checkbox" @bind-value=AvailableFilter checked="@(AvailableFilter)" /> Available only</td>
            <th style='white-space: nowrap'>
                <button class="btn btn-primary" @onclick="@(async (e) => await OnFilterClicked(false))">Filter</button>
                <button class="btn btn-danger" @onclick="OnClearFilterClicked">Reset</button>
            </th>
        </tr>
    </thead>

    <tbody>
        @if (Products != null)
        {
            @foreach (var user in Products)
            {
                <tr>
                    <td>@user.Name</td>
                    <td>@user.Price</td>
                    <td>@(user.IsAvailable ? "Yes" : "No")</td>
                    <td><NavLink class="btn btn-primary" @onclick="async (e) => {if (OnUserClickedAsync != null) await OnUserClickedAsync(user.Id);}">@ButtonText</NavLink>  </td>
                </tr>
            }
        }
    </tbody>
    <tfoot>
        <tr>
            @if (ShowLoadMoreButton)
            {
                <td align="center" colspan="5"><button class="btn btn btn-secondary" @onclick="@(async (e) => await OnFilterClicked(true))">Load more</button></td>
            }
        </tr>
    </tfoot>
</table>


@code {
    private List<ProductListDto> Products { get; set; } = null!;

    private const int DEFAULT_ROLE_FILTER_VALUE = -1;

    private string? NameFilter;
    private double? PriceFilterFrom;
    private double? PriceFilterTo;
    private bool? AvailableFilter = true;

    private string? currentFilter;

    private int LoadAmm;
    private int _loadCounter = 0;
    private bool ShowLoadMoreButton = false;

    private const int DEFAULT_LOAD_VALUE = 10;

    private Front.Models.User? authenticatedUser;
    private bool IsAdminView => authenticatedUser?.IsAdmin ?? false;

    protected override async Task OnInitializedAsync()
    {
        LoadAmm = DEFAULT_LOAD_VALUE;
        authenticatedUser = authStateProvider.CurrentUser;
        if (OnObjectButtonClickedAsyncHandler != null)
        {
            OnUserClickedAsync += OnObjectButtonClickedAsyncHandler;
        }

        await OnFilterClicked(false);
    }


    private async Task OnFilterClicked(bool incrimentPageCounter = false)
    {
        var filter = $"Name:{NameFilter}; PriceFilterFrom:{PriceFilterFrom}; PriceFilterTo:{PriceFilterTo}; AvailableFilter:{AvailableFilter}";
        Console.WriteLine(filter);
        List<ProductListDto> res;
        if (filter == currentFilter && incrimentPageCounter)
        {
            res = (await gatewayClient.PoductListAsync(null, NameFilter, null, PriceFilterFrom, PriceFilterTo, AvailableFilter == false ? null : true, null, null, null, ++_loadCounter, LoadAmm)).ToList();
            Products.AddRange(res);
        }
        else
        {
            _loadCounter = 1;
            currentFilter = filter;
            res = (await gatewayClient.PoductListAsync(null, NameFilter, null, PriceFilterFrom, PriceFilterTo, AvailableFilter == false ? null : true, null, null, null, _loadCounter, LoadAmm)).ToList();
            Products = res;
        }

        ShowLoadMoreButton = res.Count() == LoadAmm;
    }

    private void AuthStateChanged(Task<AuthenticationState> authenticationState)
    {
        authenticatedUser = authStateProvider.CurrentUser;
        StateHasChanged();
    }

    private async Task OnClearFilterClicked(MouseEventArgs e)
    {
        PriceFilterTo = null;
        PriceFilterFrom = null;
        AvailableFilter = null;
        NameFilter = null;
        AvailableFilter = true;
        currentFilter = null;
        await OnFilterClicked();
    }


    public event Func<Guid, Task>? OnUserClickedAsync;


    [Parameter]
    public Func<Guid, Task>? OnObjectButtonClickedAsyncHandler { get; set; }
    [Parameter]
    public string? ButtonText { get; set; }
}