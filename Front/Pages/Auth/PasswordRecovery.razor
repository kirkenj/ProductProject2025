@page "/passwordrecovery"
@using Front.Models
@inject Front.Services.CustomAuthStateProvider authStateProvider
@inject NavigationManager navManager
@inject Clients.CustomGateway.IAuthGatewayClient authClient


@if (User == null)
{
    <PageTitle>Password recovery</PageTitle>

    <h1>Password recovery</h1>

    <Front.Components.Modals.MessageBox @ref="messageBox"/>
    
    
    <div>
        Email
        @if (!string.IsNullOrEmpty(EmailMessage))
        {
            <div class="text-danger">
                @EmailMessage
            </div>
        }
        <input class="input-group-text" @bind="Email"/>
    </div>

    
    <button class="btn btn-primary" @onclick="OnSubmitClicked">Submit</button>
}
else
{
    <div>
        Redirecting to user page
    </div>

    navManager.NavigateTo($"user/{User.Id}");
}



@code {
    private string Email = string.Empty;

    private string? EmailMessage;

    private User? User { get; set; }

    Front.Components.Modals.MessageBox messageBox = null!;

    protected override void OnInitialized()
    {
        authStateProvider.AuthenticationStateChanged += AuthStateChanged;
        User = authStateProvider.CurrentUser;
        base.OnInitialized();
    }

    private void AuthStateChanged(Task<AuthenticationState> authenticationState)
    {
        User = authStateProvider.CurrentUser;
        StateHasChanged();
    }


    private async Task OnSubmitClicked(MouseEventArgs e)
    {
        EmailMessage = null;

        try
        {
            if (!System.Net.Mail.MailAddress.TryCreate(Email, out System.Net.Mail.MailAddress? a))
            {
                EmailMessage = "That is not a valid email";
                return;
            }

            var result = await authClient.ForgotPasswordAsync(Email);
            messageBox.ClearOnCloseEvent();
            messageBox.OnClose += (c) => { messageBox.ClearOnCloseEvent(); navManager.NavigateTo(""); return Task.CompletedTask; };
            messageBox.ModalShow("Success", result);
        }
        catch (Clients.CustomGateway.GatewayException ex)
        {
            messageBox.ModalShow("Error", ex.Message);
        }
    }
}
